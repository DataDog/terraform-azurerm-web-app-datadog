# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/) Copyright 2025 Datadog, Inc.

# DO NOT EDIT: This file is generated by terraform-autogen. Update the autogen_config.json file to change the generated code.

variable "app_settings" {
  type    = map(string)
  default = null
}

variable "client_affinity_enabled" {
  type    = bool
  default = null
}

variable "client_certificate_enabled" {
  type    = bool
  default = null
}

variable "client_certificate_exclusion_paths" {
  type        = string
  default     = null
  description = <<DESCRIPTION
Paths to exclude when using client certificates, separated by ;
DESCRIPTION
}

variable "client_certificate_mode" {
  type    = string
  default = null
}

variable "enabled" {
  type    = bool
  default = null
}

variable "ftp_publish_basic_authentication_enabled" {
  type    = bool
  default = null
}

variable "https_only" {
  type    = bool
  default = null
}

variable "key_vault_reference_identity_id" {
  type    = string
  default = null
}

variable "location" {
  type     = string
  nullable = false
}

variable "name" {
  type     = string
  nullable = false
}

variable "public_network_access_enabled" {
  type    = bool
  default = null
}

variable "resource_group_name" {
  type     = string
  nullable = false
}

variable "service_plan_id" {
  type     = string
  nullable = false
}

variable "tags" {
  type    = map(string)
  default = null
}

variable "virtual_network_backup_restore_enabled" {
  type    = bool
  default = null
}

variable "virtual_network_subnet_id" {
  type    = string
  default = null
}

variable "webdeploy_publish_basic_authentication_enabled" {
  type    = bool
  default = null
}

variable "zip_deploy_file" {
  type        = string
  default     = null
  description = <<DESCRIPTION
The local path and filename of the Zip packaged application to deploy to this Windows Web App. **Note:** Using this value requires either `WEBSITE_RUN_FROM_PACKAGE=1` or `SCM_DO_BUILD_DURING_DEPLOYMENT=true` to be set on the App in `app_settings`.
DESCRIPTION
}

variable "auth_settings" {
  type = object({
    additional_login_parameters   = optional(map(string)),
    enabled                       = bool,
    issuer                        = optional(string),
    token_refresh_extension_hours = optional(number),
    token_store_enabled           = optional(bool),
    active_directory = optional(object({
      allowed_audiences          = optional(list(string)),
      client_id                  = string,
      client_secret              = optional(string),
      client_secret_setting_name = optional(string)
    })),
    facebook = optional(object({
      app_id                  = string,
      app_secret              = optional(string),
      app_secret_setting_name = optional(string),
      oauth_scopes            = optional(list(string))
    })),
    github = optional(object({
      client_id                  = string,
      client_secret              = optional(string),
      client_secret_setting_name = optional(string),
      oauth_scopes               = optional(list(string))
    })),
    google = optional(object({
      client_id                  = string,
      client_secret              = optional(string),
      client_secret_setting_name = optional(string),
      oauth_scopes               = optional(list(string))
    })),
    microsoft = optional(object({
      client_id                  = string,
      client_secret              = optional(string),
      client_secret_setting_name = optional(string),
      oauth_scopes               = optional(list(string))
    })),
    twitter = optional(object({
      consumer_key                 = string,
      consumer_secret              = optional(string),
      consumer_secret_setting_name = optional(string)
    }))
  })
  default = null
}

variable "auth_settings_v2" {
  type = object({
    auth_enabled                            = optional(bool),
    config_file_path                        = optional(string),
    default_provider                        = optional(string),
    excluded_paths                          = optional(list(string)),
    forward_proxy_convention                = optional(string),
    forward_proxy_custom_host_header_name   = optional(string),
    forward_proxy_custom_scheme_header_name = optional(string),
    http_route_api_prefix                   = optional(string),
    require_authentication                  = optional(bool),
    require_https                           = optional(bool),
    runtime_version                         = optional(string),
    unauthenticated_action                  = optional(string),
    active_directory_v2 = optional(object({
      allowed_applications                 = optional(list(string)),
      allowed_audiences                    = optional(list(string)),
      allowed_groups                       = optional(list(string)),
      allowed_identities                   = optional(list(string)),
      client_id                            = string,
      client_secret_certificate_thumbprint = optional(string),
      client_secret_setting_name           = optional(string),
      jwt_allowed_client_applications      = optional(list(string)),
      jwt_allowed_groups                   = optional(list(string)),
      login_parameters                     = optional(map(string)),
      tenant_auth_endpoint                 = string,
      www_authentication_disabled          = optional(bool)
    })),
    apple_v2 = optional(object({
      client_id                  = string,
      client_secret_setting_name = string
    })),
    azure_static_web_app_v2 = optional(object({
      client_id = string
    })),
    custom_oidc_v2 = optional(list(object({
      client_id                     = string,
      name                          = string,
      name_claim_type               = optional(string),
      openid_configuration_endpoint = string,
      scopes                        = optional(list(string))
    }))),
    facebook_v2 = optional(object({
      app_id                  = string,
      app_secret_setting_name = string,
      login_scopes            = optional(list(string))
    })),
    github_v2 = optional(object({
      client_id                  = string,
      client_secret_setting_name = string,
      login_scopes               = optional(list(string))
    })),
    google_v2 = optional(object({
      allowed_audiences          = optional(list(string)),
      client_id                  = string,
      client_secret_setting_name = string,
      login_scopes               = optional(list(string))
    })),
    login = object({
      allowed_external_redirect_urls    = optional(list(string)),
      cookie_expiration_convention      = optional(string),
      cookie_expiration_time            = optional(string),
      logout_endpoint                   = optional(string),
      nonce_expiration_time             = optional(string),
      preserve_url_fragments_for_logins = optional(bool),
      token_refresh_extension_time      = optional(number),
      token_store_enabled               = optional(bool),
      token_store_path                  = optional(string),
      token_store_sas_setting_name      = optional(string),
      validate_nonce                    = optional(bool)
    }),
    microsoft_v2 = optional(object({
      allowed_audiences          = optional(list(string)),
      client_id                  = string,
      client_secret_setting_name = string,
      login_scopes               = optional(list(string))
    })),
    twitter_v2 = optional(object({
      consumer_key                 = string,
      consumer_secret_setting_name = string
    }))
  })
  default = null
}

variable "backup" {
  type = object({
    enabled             = optional(bool),
    name                = string,
    storage_account_url = string,
    schedule = object({
      frequency_interval       = number,
      frequency_unit           = string,
      keep_at_least_one_backup = optional(bool),
      retention_period_days    = optional(number)
    })
  })
  default = null
}

variable "connection_string" {
  type = set(object({
    name  = string,
    type  = string,
    value = string
  }))
  default = null
}

variable "identity" {
  type = object({
    identity_ids = optional(set(string)),
    type         = string
  })
  default = null
}

variable "logs" {
  type = object({
    detailed_error_messages = optional(bool),
    failed_request_tracing  = optional(bool),
    application_logs = optional(object({
      file_system_level = string,
      azure_blob_storage = optional(object({
        level             = string,
        retention_in_days = number,
        sas_url           = string
      }))
    })),
    http_logs = optional(object({
      azure_blob_storage = optional(object({
        retention_in_days = optional(number),
        sas_url           = string
      })),
      file_system = optional(object({
        retention_in_days = number,
        retention_in_mb   = number
      }))
    }))
  })
  default = null
}

variable "site_config" {
  type = object({
    always_on                                     = optional(bool),
    api_definition_url                            = optional(string),
    api_management_api_id                         = optional(string),
    app_command_line                              = optional(string),
    container_registry_managed_identity_client_id = optional(string),
    container_registry_use_managed_identity       = optional(bool),
    ftps_state                                    = optional(string),
    health_check_eviction_time_in_min             = optional(number),
    health_check_path                             = optional(string),
    http2_enabled                                 = optional(bool),
    ip_restriction_default_action                 = optional(string),
    load_balancing_mode                           = optional(string),
    local_mysql_enabled                           = optional(bool),
    managed_pipeline_mode                         = optional(string),
    minimum_tls_version                           = optional(string),
    remote_debugging_enabled                      = optional(bool),
    scm_ip_restriction_default_action             = optional(string),
    scm_minimum_tls_version                       = optional(string),
    scm_use_main_ip_restriction                   = optional(bool),
    use_32_bit_worker                             = optional(bool),
    vnet_route_all_enabled                        = optional(bool),
    websockets_enabled                            = optional(bool),
    application_stack = optional(object({
      current_stack  = optional(string),
      dotnet_version = optional(string),
      java_version   = optional(string),
      node_version   = optional(string)
    })),
    auto_heal_setting = optional(object({
      action = object({
        action_type = string,
        custom_action = optional(object({
          executable = string,
          parameters = optional(string)
        }))
      }),
      trigger = object({
        private_memory_kb = optional(number),
        requests = optional(object({
          count    = number,
          interval = string
        })),
        slow_request = optional(object({
          count      = number,
          interval   = string,
          time_taken = string
        })),
        slow_request_with_path = optional(list(object({
          count      = number,
          interval   = string,
          path       = optional(string),
          time_taken = string
        }))),
        status_code = optional(set(object({
          count             = number,
          interval          = string,
          path              = optional(string),
          status_code_range = string,
          sub_status        = optional(number),
          win32_status_code = optional(number)
        })))
      })
    })),
    cors = optional(object({
      allowed_origins     = optional(set(string)),
      support_credentials = optional(bool)
    })),
    handler_mapping = optional(set(object({
      arguments             = optional(string),
      extension             = string,
      script_processor_path = string
    }))),
    ip_restriction = optional(list(object({
      action      = optional(string),
      description = optional(string),
      headers = optional(list(object({
        x_azure_fdid      = list(string),
        x_fd_health_probe = list(string),
        x_forwarded_for   = list(string),
        x_forwarded_host  = list(string)
      }))),
      ip_address                = optional(string),
      priority                  = optional(number),
      service_tag               = optional(string),
      virtual_network_subnet_id = optional(string)
    }))),
    scm_ip_restriction = optional(list(object({
      action      = optional(string),
      description = optional(string),
      headers = optional(list(object({
        x_azure_fdid      = list(string),
        x_fd_health_probe = list(string),
        x_forwarded_for   = list(string),
        x_forwarded_host  = list(string)
      }))),
      ip_address                = optional(string),
      priority                  = optional(number),
      service_tag               = optional(string),
      virtual_network_subnet_id = optional(string)
    }))),
    virtual_application = optional(set(object({
      physical_path = string,
      preload       = bool,
      virtual_path  = string,
      virtual_directory = optional(set(object({
        physical_path = optional(string),
        virtual_path  = optional(string)
      })))
    })))
  })
  nullable = false
}

variable "sticky_settings" {
  type = object({
    app_setting_names       = optional(list(string)),
    connection_string_names = optional(list(string))
  })
  default = null
}

variable "storage_account" {
  type = set(object({
    access_key   = string,
    account_name = string,
    mount_path   = optional(string),
    name         = string,
    share_name   = string,
    type         = string
  }))
  default = null
}

variable "timeouts" {
  type = object({
    create = optional(string),
    delete = optional(string),
    read   = optional(string),
    update = optional(string)
  })
  default = null
}
